Kernelloader for ps2 Linux
##########################

This program can load a Linux kernel and start it. You need Linux kernel
2.4.17 for ps2 from the sony website. To build it you need a Linux host
and the PS2SDK. You also need to get a mips cross compiler. You can
download it here:

Linux 2.4.17_mvl21:
http://www.sony.net/Products/Linux/Download/PlayStation_BB_Navigator.html

Select Playstation 2 and download the following files:
kernel-headers-2.4.17_ps2-26.mipsel.rpm
kernel-source-2.4.17_ps2-26.mipsel.rpm

Toolchain:
https://playstation2-linux.com/files/ps2stuff/gcc-2.95.2-cross.tar.gz
https://playstation2-linux.com/files/ps2stuff/binutils-2.9EE-cross.tar.gz

initrd:
http://playstation2-linux.com/files/diskless/ps2boot-1.tar.gz

sh # su
sh # tar -xzf gcc-2.95.2-cross.tar.gz -C /usr/local
sh # tar -xzf binutils-2.9EE-cross.tar.gz -C /usr/local

Install it and change to kernel directory:

sh # rpm2cpio kernel-headers-2.4.17_ps2-26.mipsel.rpm | cpio -idmv
sh # rpm2cpio kernel-source-2.4.17_ps2-26.mipsel.rpm | cpio -idmv
sh # cd usr/src/linux-2.4.17_ps2

There is no patch required to start Linux.

The following patch is recommended to get initrd working:

sh # patch -p1 <../kernelloader/linux-2.4.17_ps2-initrd.patch

To get interrupts working on slim PSTwo (USB), you need this patch:

sh # patch -p1 <../kernelloader/linux-2.4.17_ps2-rpc-irq.patch

To get ethernet working on slim PSTwo, you need to
replace the smap driver:

sh # cp ../driver_slim_smaprpc/smap.c drivers/ps2/
sh # cp ../driver_slim_smaprpc/smap.h drivers/ps2/

This installs the Linux driver for smaprpc.irx.


You can add support for printk over ps2link by patching Linux (system
start is slower):

sh # patch -p1 <../kernelloader/linux-2.4.17_ps2-printk.patch

Then set the toolchain:

sh # echo "/usr/local/ps2/bin/ee-" >.hhl_cross_compile-mips-r5900
sh # ./setup-ps2


Status: Kerneloader has a on screen menu. Debug information is
printed using ps2link, when it is enabled in config.mk. Kernel is starting,
most stuff is working including graphic, USB, hard disc and network.
Sound and some configuration stuff is not working. CD/DVD access is
unstable and incomplete.

INSTALL:
First you need to compile ps2smap and ps2link from ps2dev svn and copy the
modules "ps2smap.irx" and "ps2link.irx" to the directory "$PS2SDK/iop/irx/".
Then run make for a test (You should change the ip address in
"loader/Makefile" and in "loader/loader.c" variable "ifcfg"):

PS2SDK
######
To compile kernelloader you need PS2SDK, if you don't use it already
install it as follows:

sh # svn co -r 1601 svn://svn.ps2dev.org/ps2/trunk/ps2toolchain
sh # cd ps2toolchain
sh # chmod +x toolchain.sh
sh # ./toolchain.sh

After installation you need to remove "-c" from IOP_CFLAGS in file 
"/usr/local/ps2dev/ps2sdk/samples/Makefile.iopglobal". Maybe this is
fixed in newer ps2sdk versions. For more information see discussion:
http://forums.ps2dev.org/viewtopic.php?t=7506

Recommended is revision 1601 of ps2sdk.

USB
###
You need also to install the usb driver:

sh # svn co -r 1601 svn://svn.ps2dev.org/ps2/trunk/usb_mass
sh # cd usb_mass
sh # cd iop
sh # make
sh # cp usb_mass.irx /usr/local/ps2dev/ps2sdk/iop/irx

STL
###
STL is used and need to be installed:

sh # svn co -r 1588 svn://svn.ps2dev.org/ps2/trunk/ps2sdk-ports/stlport
sh # cd stlport
sh # make
sh # make install

ZLIB
####
ZLIB need to be installed:
sh # svn co -r 1588 svn://svn.ps2dev.org/ps2/trunk/ps2sdk-ports/zlib
sh # cd zlib
sh # make
sh # make install

PS2LINK
#######
If you want to debug something then you also need ps2link, but the
following steps are not required, when you don't activate it in
config.mk.

sh # svn co -r 1588 svn://svn.ps2dev.org/ps2/trunk/ps2eth
sh # cd ps2eth
sh # make
sh # cp smap/ps2smap.irx /usr/local/ps2dev/ps2sdk/iop/irx/
sh # cd ..
sh # svn co -r 1588 svn://svn.ps2dev.org/ps2/trunk/ps2link
sh # cd ps2link
sh # make
sh # cp iop/ps2link.irx /usr/local/ps2dev/ps2sdk/iop/irx/

To further compile someting for PS2SDK, you need to setup the environment:
export PS2DEV="/usr/local/ps2dev"
export PS2SDK="$PS2DEV/ps2sdk"
export PS2LIB="$PS2SDK"
export PATH="${PS2DEV}/bin:${PS2DEV}/ee/bin:${PS2DEV}/iop/bin:${PS2DEV}/dvp/bin:${PS2DEV}/ps2sdk/bin:$PATH"

You need also to set up where your source code is:
export PS2_SRC_PREFIX=$HOME/ps2src
You need to adjust it to your prefered path.
export PS2SDKSRC="${PS2_SRC_PREFIX}/ps2sdk"
export GSKITSRC="${PS2_SRC_PREFIX}/gsKit"
export LIBTIFF="${PS2_SRC_PREFIX}/libtiff"
export LIBJPG="${PS2_SRC_PREFIX}/libjpg/libjpg"
export PS2ETH="${PS2_SRC_PREFIX}/ps2eth"

GSKIT
#####
The graphic library is used for displaying everything. You need to install it:
sh # cd $PS2SDKSRC
sh # svn co -r 1588 svn://svn.ps2dev.org/ps2/trunk/gsKit
sh # cd gsKit
sh # make
sh # make install

SJCRUNCH
########
sjcrunch is a packer for PS2 elf files. This is required to get smaller
file size and to get a version which can be booted by Action Replay
Media Player. You need to download it from:

http://www.ps2dev.org

sh # cd $PS2SDKSRC
sh # mkdir sjcrunch
sh # cd sjcrunch
sh # unzip sjcrunch-2.1.zip
sh # cd pc
sh # make
sh # cd ..
sh # cp pc/sjcrunch_packer script
sh # cd sjcrunch
sh # sed <sjcrunch -e s-SJCRUNCH_PATH=.*-SJCRUNCH_PATH=$(pwd)- -e s-SJCRUNCH_PACKER=.*-SJCRUNCH_PACKER=\$SJCRUNCH_PATH/sjcrunch_packer- >/usr/local/ps2dev/ps2sdk/bin/sjcrunch
sh # chmod +x /usr/local/ps2dev/ps2sdk/bin/sjcrunch

Kernelloader
############
To compile kernelloader you need some additional libraries on your host:

- libpng

You need to check that you have the development package installed (on debian suffix "-dev", on SuSe "devel")

Now you can go back to kernelloader for a test:

sh # make

The following test will upload the elf file using ps2link. ps2link must
be started on the PS2. You can also use your prefered upload method. The
elf file "kloader.elf" can also be started by AR Max Media Player. You need
just to copy it on a USB memory stick.

sh # make test

A menu will start and you can select the first menu entry by pressing the
CROSS button on the first pad.
You should see the output of example kernel on screen. The kernel
tries to emulate the original PS2 kernel and start a graphic demo. SIFRPC
is working correctly in this kernel. All IOP hardware should work. Only
single thread and a interrupt handler is supported.

Linux
#####
Now you should compile the Linux kernel. Run menu config and deactivate
old bootinfo support.

sh # make menuconfig

Deactivate "Machine selection"  ---> "Support for old style boot information"
Activate "Machine selection"  ---> "Support for PS2 Memory Card File System" (choose "*" and not "M")
Activate "Block devices" ---> "RAM disk support" (choose "*" and not "M")
Activate "Block devices" ---> "Initial RAM disk (initrd) support"
Activate "File systems" ---> "ISO 9660 CDROM file system support" (choose "*" and not "M")
Activate "File systems" ---> "Second extended fs support" (choose "*" and not "M")

Slim PSTwo needs access to USB devices:
Activate "SCSI Support" ---> "SCSI Support" (choose "*" and not "M")
Activate "SCSI Support" ---> "SCSI disk support" (choose "*" and not "M")
Activate "USB support" ---> "USB Mass storage support" (choose "*" and not "M")
Activate "File Systems" ---> "DOS FAT fs support" (choose "*" and not "M")
Activate "File Systems" ---> "MSDOS fs support" (choose "*" and not "M")
Activate "File Systems" ---> "VFAT (Windows-95) fs support" (choose "*" and not "M")

Save configuration and then run:

sh # make dep
sh # make

You should strip it, to reduce loading time and to prevent out of memory errors (less than 12MB available).
sh # /usr/local/ps2/bin/ee-strip vmlinux

You need to copy the file "linux-2.4.17_ps2/vmlinux" on a ps2 memroy card
or a USB memroy stick and insert it into your PS2.

Initrd
######
The initrd includes the Linux file system. This required for installing
Linux.

Make an "initrd.gz":

Extract "ps2boot-1.tar.gz" as root user.

Generate "initrd.gz" as root user.

sh # ./mkbootcd.sh

Then copy "initrd.gz" to "kernelloader/loader".

sh # cp initrd.gz ../kernelloader/loader/

Kernelloader
############
Go back to kernelloader dir and run make test again.

sh # make test

Maximum size of kernel is ~4 MB.
The loader sets maximum "initrd.gz" decompressed size to 16 MB (using
"ramdisk_size=16384").
The Linux kernel should start. USB keyboard is working. You can also
load the kernel from a memory card or a USB memory stick. You can select
the file in the menu in the kernelloader on the PS2 using the first pad.

Remarks:
########

You can select the SBIOS type "TGE" or "RTE" if you have DISC 1 from Sony's
Linux (for PlayStation 2) Release 1.0. To start Linux this is not required.
TGE is not finished and it is possible that "RTE" is running more stable.
Then you need to put in the original PS2 Linux DVD DISC 1 and adjust the
path in config.mk. The SBIOS will be automatically extracted. Linux will
only start with this version when you change the configuration accordingly:

When kernelloader is started you need to do the following:
1. Uncheck "Enable TGE (disable RTE)" in "Configuration Menu".
2. Execute "Submit above config" in "Configuration Menu".
3. Uncheck "Use SBIOS from TGE (ow RTE)".
4. Uncheck all CDVD entries in "Enabled SBIOS Calls" menu which is
located in "Configuration Menu" (entries 176 to 195).

With this configuration USB keyboard seems only to work when it is not
plugged in at startup.

USB is only working when ps2link modules are not loaded (see "Configuration Menu").
It is also possible to select new ROM modules instead of old ones.

CDVD calls should also be disabled when using TGE, because of some Linux
kernel exceptions.

Files with prefix "host:" a first searched in a kloader.elf embedded
files system.

Module Information
##################

You can select which IOP modules are loaded in kernelloader. Module names
prefixed with "rom0:X" are the new rom modules. Module names without the
"X" are the old ones. Each playstation has the same version of the old modules.
ps2link is only for debugging. It's purpose in this project is to print debug
messages over network. The messages can be seen on the host using ps2client.
The new modules can be different. Here is more information about the modules
(the modules are listed in groups, only one module of a group is required):

eedebug.irx
Required: No
Patch: linux-2.4.17_ps2-iop-debug.patch
Module send all output of IOP processor to host. Linux patch is required
to see this information at "/proc/ps2iopdebug".

init.irx
imodule1.irx
imodule2.irx
imodule3.irx
imodule4.irx
imodule5.irx
Required: No
You can copy a module to mc0:kloader/ to add a custom module, you
want to load.

SIO2MAN
XSIO2MAN
sio2man.irx
freesio2.irx
Required: Yes
System module. Required to start other modules.

MCMAN
XMCMAN
mcman.irx
Required: Yes, or accessing memroy cards.
Access to PS2 memory cards on IOP.

MCSERV
XMCSERV
mcserv.irx
Required: Yes, or accessing memroy cards.
RPC server for MCMAN. Linux will call the RPC server.

PADMAN
XPADMAN
padman.irx
freepad
Required: Yes, for accessing playstation game controllers.
Driver and RPC server to access gamecontrollers by EE.

iomanX.irx
Required: No, only for ps2link.
File IO driver on IOP.

poweroff.irx
Required: No, only for ps2link.
To get poweroff button working when hard disc is used (DEV9, ps2link).

dev9init.irx
Required: Yes, only for fat PS2. Incompatible with slim PSTwo.
Configure dev9 (expansion bay, ethernet + hdd).

ps2dev9.irx
Required: Yes, for slim PSTwo and for ps2link.
Driver for DEV9 (hardware interface to expansion bay or PCMCIA).
Grants access to network and hard disc.

ps2ip.irx
Reuqired: No, only for ps2link.
TCP/IP network stack on IOP processor.

ps2smap.irx
Required: No, only for ps2link.
Network driver on IOP processor. Linux has it's own driver. When
this driver is used and Linux driver is activated. Linux driver will
deactivate this one. When IOP tries to use the network the system will hang.
This module is incompatible with ps2smap.irx.

smaprpc.irx
Required: Yes, for slim PSTwo if you want to use ethernet.
Network driver on IOP processor. You need also to load ps2dev9.irx.
This module is incompatible with ps2smap.irx.

ps2link.irx
Required: No, only for ps2link.
ps2link is a IOP module which helps debugging.

sharedmem.irx
Required: No, only for ps2link or if you applied the patch.
Patch: linux-2.4.17_ps2-printk.patch
This module is only for debugging and is easier than the RPC interface. Its
purpose is to get a easy way to print messages on EE. If you applied the patch
Linux will only start if you load the module.

iopintr.irx
intrelay-direct.irx
intrelay-direct-rpc.irx
intrelay-dev9.irx
intrelay-dev9-rpc.irx
Required: Yes
Redirects interrupts from IOP to EE.
You need only one module. The normal module is "intrelay-direct.irx". If you
use ps2link or ps2dev9 you need to load "intrelay-dev9.irx". When you have a
slim PSTwo you should use a module with "rpc" in the name and a Linux patch:

linux-2.4.17_ps2-rpc-irq.patch

System can hang if you try to use network from IOP and EE!

dmarelay.irx
Required: No
Redirects DMA from EE to IOP and backwards. There is no Linux driver using it
correctly. Its purpose is to speed up network and hard disc. Only the RTE
module is working.

CDVDMAN
XCDVDMAN
cdvdman.irx
Required: Yes
Reading CDs and DVDs.

CDVDFSV
XCDVDFSV
Required: No
I believe it is not required by Linux.

ADDDRV
Required: Yes, for reading video DVDs.
Enables access to rom1.

eromdrvloader
EROMDRV
Required: Yes, for reading video DVDs.
Need to be loaded to read video DVDs.

LIBSD
libsd.irx
freesd.irx
Required: Yes, for sound.
Need to be loaded to get sound working. Only the RTE module is working.

SDRDRV
sdrdrv.irx
Required: Yes, for sound with original Sony Linux Kernel.
Sound server. Only the RTE module is working.

audsrv.irx
Required: Yes, for sound with special Linux Kernel.
Sound server.

ioptrap.irx
Required: No, only for ps2link
Module is only for debugging.

RMMAN
RMMAN2
Required: No
Driver for remote control. This not supported in TGE and RTE SBIOS.

Configuration Order
###################
At startup the default configuration is set. Then configuration is loaded
from a file. When a value is missing in the configuration file the default
configuration is used. The search order of the configuration files is
"cdfs:config.txt" and then "mc0:kloader/config.txt". The auto boot time is
part of the configuration file.

Loading Custom Kernelloader Modules
###################################
Kernelloader includes default modules. You can replace the modules by copying
other versions to the directory "mc0:kloader/". The following modules are loaded
for kernelloader. These modules are only used within kernelloader and not
by Linux. Here is the list in loading order:
SMSUTILS.irx
SMSCDVD.irx
ioptrap.irx
iomanX.irx
poweroff.irx
ps2dev9.irx
ps2ip.irx
ps2smap.irx
ps2link.irx
usbd.irx
usb_mass.irx
fileXio.irx
ps2kbd.irx

When your USB memory stick is not supported within kernelloader, you can
replace usbd.irx and usb_mass.irx. Just copy the files to "mc0:kloader/".
It is possible that kernelloader will not start afterwards. To get it working
again just remove the files or remove the memory card.

Loading Custom Linux Modules
############################
Kernelloader includes default modules. You can replace the modules by copying
other versions to the directory "mc0:kloader/". The following modules are loaded
for Linux. These modules are only used by Linux. Here is the list in loading
order:
init.irx (*)
sio2man.irx
mcman.irx
mcserv.irx
padman.irx
libsd.irx
sdrdrv.irx
iopintr.irx
dmarelay.irx
cdvdman.irx
cdvdfsv.irx
module1.irx (*)
module2.irx (*)
module3.irx (*)
module4.irx (*)
module5.irx (*)

sbios.elf

These modules need to be selected in the module configuration menu. These modules
are automatially choosen if you submit with RTE modules enabled.
There is a menu entry which copies the RTE modules from Sony's Linux kit DVD.
sbios.elf is extracted from pbpx_955.09.
Modules marked with (*) are not part of RTE and can be used to load custom
modules.

Extracting RTE modules and SBIOS
################################
At the end of the configuration menu there is a menu entry for copying RTE modules
and SBIOS from Sony's Linux Kit DVD 1. There are menu entries for changing the source
path if your DVD looks different. When the files doesn't exist, it is possible
that it will hang. This problem is caused by the Video DVD driver. You need to copy/
extract all files.
Then you can select all RTE modules and RTE SBIOS in the module and configuration
menu. You need also to disable CDVD SBIOS calls, because Linux will not start when
the calls are enabled and RTE SBIOS is used.
