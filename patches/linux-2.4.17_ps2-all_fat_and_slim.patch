This patch includes all patches needed for linux-2.4.17_ps2.
TBD: The function ps2_powerbutton_enable_auto_shutoff() seems to confuse parameters for receive and send. Maybe power button will not work correctly.
diff -urp linux-2.4.17_ps2.orig/arch/mips/kernel/irq.c linux-2.4.17_ps2.fat_and_slim/arch/mips/kernel/irq.c
--- linux-2.4.17_ps2.orig/arch/mips/kernel/irq.c	2002-03-04 11:31:35.000000000 +0100
+++ linux-2.4.17_ps2.fat_and_slim/arch/mips/kernel/irq.c	2009-08-14 12:01:31.000000000 +0200
@@ -121,11 +121,11 @@ int handle_IRQ_event(unsigned int irq, s
 	if (!(action->flags & SA_INTERRUPT))
 		__sti();
 
-	do {
+	while (action) {
 		status |= action->flags;
 		action->handler(irq, action->dev_id, regs);
 		action = action->next;
-	} while (action);
+	}
 	if (status & SA_SAMPLE_RANDOM)
 		add_interrupt_randomness(irq);
 	__cli();
@@ -363,6 +363,23 @@ out:
 	return 1;
 }
 
+void handleSimulatedIRQ(int irq)
+{
+	struct irqaction * action;
+
+	if (irq < NR_IRQS) {
+		irq_desc_t *desc = irq_desc + irq;
+
+		action = desc->action;
+
+		while (action) {
+			action->handler(irq, action->dev_id, NULL);
+			action = action->next;
+		}
+	}
+}
+
+
 /**
  *	request_irq - allocate an interrupt line
  *	@irq: Interrupt line to allocate
diff -urp linux-2.4.17_ps2.orig/arch/mips/Makefile linux-2.4.17_ps2.fat_and_slim/arch/mips/Makefile
--- linux-2.4.17_ps2.orig/arch/mips/Makefile	2002-11-20 13:14:52.000000000 +0100
+++ linux-2.4.17_ps2.fat_and_slim/arch/mips/Makefile	2009-08-14 11:47:11.000000000 +0200
@@ -114,9 +114,11 @@ endif
 # arch/mips/ramdisk
 #
 ifdef CONFIG_BLK_DEV_INITRD 
+ifdef CONFIG_EMBEDDED_RAMDISK
 CORE_FILES      += arch/mips/ramdisk/ramdisk.o
 SUBDIRS		+= arch/mips/ramdisk
 endif
+endif
 
 
 GCCFLAGS	+= -pipe
diff -urp linux-2.4.17_ps2.orig/arch/mips/ps2/prom.c linux-2.4.17_ps2.fat_and_slim/arch/mips/ps2/prom.c
--- linux-2.4.17_ps2.orig/arch/mips/ps2/prom.c	2002-07-10 08:14:52.000000000 +0200
+++ linux-2.4.17_ps2.fat_and_slim/arch/mips/ps2/prom.c	2009-08-14 12:02:04.000000000 +0200
@@ -40,6 +40,12 @@ extern void *akmem_bootinfo;
 extern int akmem_bootinfo_size;
 #endif /* CONFIG_AKMEM */
 
+void sbios_prints(const char *text)
+{
+	printk("SBIOS: %s", text);
+}
+
+
 void __init prom_init(int argc, char **argv, char **envp)
 {
 	struct ps2_bootinfo *bootinfo;
@@ -106,8 +112,10 @@ void __init prom_init(int argc, char **a
 	       bootinfo, oldbootinfo ? "(old style)" : "");
 	printk("boot option string at %p: %s\n",
 	       ps2_bootinfo->opt_string, arcs_cmdline);
+	sbios(SB_SET_PRINTS_CALLBACK, sbios_prints);
 }
 
+
 void __init prom_free_prom_memory(void)
 {
 }
diff -urp linux-2.4.17_ps2.orig/arch/mips/ps2/sbcall.c linux-2.4.17_ps2/arch/mips/ps2/sbcall.c
--- linux-2.4.17_ps2.orig/arch/mips/ps2/sbcall.c	2002-04-12 12:20:16.000000000 +0200
+++ linux-2.4.17_ps2/arch/mips/ps2/sbcall.c	2010-08-24 01:44:20.000000000 +0200
@@ -42,6 +42,14 @@ EXPORT_SYMBOL(ps2sif_getotherdata);
 EXPORT_SYMBOL(ps2sif_removerpc);
 EXPORT_SYMBOL(ps2sif_removerpcqueue);
 
+typedef struct t_SifCmdHeader
+{
+	u32 size;
+	void *dest;
+	int cid;
+	u32 unknown;
+} SifCmdHeader_t;
+
 /*
  *  SIF DMA functions
  */
@@ -319,6 +327,24 @@ static void sif1_dma_handler(int irq, vo
     spin_unlock(&ps2sif_dma_lock);
 }
 
+static uint32_t usrCmdHandler[256];
+
+typedef struct {
+	struct t_SifCmdHeader    sifcmd;
+	u32 data[16];
+} iop_sifCmdBufferIrq_t;
+
+void handleRPCIRQ(iop_sifCmdBufferIrq_t *sifCmdBufferIrq, void *arg)
+{
+	extern void handleSimulatedIRQ(int irq);
+
+	handleSimulatedIRQ(sifCmdBufferIrq->data[0]);
+}
+
+static void handlePowerOff(void *sifCmdBuffer, void *arg)
+{
+	kill_proc(1, SIGPWR, 1);
+}
 
 /*
  *  Initialize
@@ -326,8 +352,13 @@ static void sif1_dma_handler(int irq, vo
 
 int __init ps2sif_init(void)
 {
+	struct sb_sifaddcmdhandler_arg addcmdhandlerparam;
+	struct sb_sifsetcmdbuffer_arg setcmdhandlerbufferparam;
     init_waitqueue_head(&ps2sif_dma_waitq);
 
+    setcmdhandlerbufferparam.db = usrCmdHandler;
+    setcmdhandlerbufferparam.size = sizeof(usrCmdHandler) / 8;
+
     if (sbios(SB_SIFINIT, 0) < 0)
 	return -1;
     if (sbios(SB_SIFINITCMD, 0) < 0)
@@ -336,6 +367,24 @@ int __init ps2sif_init(void)
 	return -1;
     if (request_irq(IRQ_DMAC_6, sif1_dma_handler, SA_INTERRUPT, "SIF1 DMA", NULL))
 	return -1;
+	if (sbios(SB_SIFSETCMDBUFFER, &setcmdhandlerbufferparam) < 0) {
+		printk("Failed to initialize EEDEBUG handler (1).\n");
+	} else {
+		addcmdhandlerparam.fid = 0x20;
+		addcmdhandlerparam.func = handleRPCIRQ;
+		addcmdhandlerparam.data = NULL;
+		if (sbios(SB_SIFADDCMDHANDLER, &addcmdhandlerparam) < 0) {
+			printk("Failed to initialize SIF IRQ handler.\n");
+		}
+
+		/* The module poweroff.irx is configured to inform us. */
+		addcmdhandlerparam.fid = 20;
+		addcmdhandlerparam.func = handlePowerOff;
+		addcmdhandlerparam.data = NULL;
+		if (sbios(SB_SIFADDCMDHANDLER, &addcmdhandlerparam) < 0) {
+			printk("Failed to initialize SIF Power Off handler.\n");
+		}
+	}
     if (sbios(SB_SIFINITRPC, 0) < 0)
 	return -1;
 
diff -urp linux-2.4.17_ps2.orig/drivers/ps2/Makefile linux-2.4.17_ps2.fat_and_slim/drivers/ps2/Makefile
--- linux-2.4.17_ps2.orig/drivers/ps2/Makefile	2002-10-15 10:23:34.000000000 +0200
+++ linux-2.4.17_ps2.fat_and_slim/drivers/ps2/Makefile	2009-08-14 11:59:57.000000000 +0200
@@ -26,6 +26,7 @@ ps2rm-objs			:= rm.o
 ps2sysconf-objs			:= sysconf.o
 ps2sysproc-objs			:= sysproc.o
 ps2smap-objs			:= smap.o
+ps2smaprpc-objs			:= smaprpc.o
 ps2dev-objs			:= ps2dev.o ps2event.o ps2mem.o ps2dma.o ps2image.o
 
 obj-$(CONFIG_PS2_PAD)		+= ps2pad.o
@@ -37,6 +38,7 @@ obj-$(CONFIG_PS2_RM)		+= ps2rm.o
 obj-$(CONFIG_PS2_SYSCONF)	+= ps2sysconf.o 
 obj-$(CONFIG_PS2_SYSPROC)	+= ps2sysproc.o 
 obj-$(CONFIG_PS2_ETHER_SMAP)	+= ps2smap.o
+obj-$(CONFIG_PS2_ETHER_SMAP)	+= ps2smaprpc.o
 obj-$(CONFIG_PS2_PS2DEV)	+= ps2devmod.o
 obj-y				+= mcfs/ps2mcfsarc.o
 
@@ -60,5 +62,7 @@ ps2sysproc.o: $(ps2sysproc-objs)
 	$(LD) -r -o $@ $(ps2sysproc-objs)
 ps2smap.o: $(ps2smap-objs)
 	$(LD) -r -o $@ $(ps2smap-objs)
+ps2smaprpc.o: $(ps2smaprpc-objs)
+	$(LD) -r -o $@ $(ps2smaprpc-objs)
 ps2devmod.o: $(ps2dev-objs)
 	$(LD) -r -o $@ $(ps2dev-objs)
diff -urp linux-2.4.17_ps2.orig/include/asm-mips/ps2/sbcall.h linux-2.4.17_ps2.fat_and_slim/include/asm-mips/ps2/sbcall.h
--- linux-2.4.17_ps2.orig/include/asm-mips/ps2/sbcall.h	2003-03-13 09:14:01.000000000 +0100
+++ linux-2.4.17_ps2.fat_and_slim/include/asm-mips/ps2/sbcall.h	2009-08-14 12:03:15.000000000 +0200
@@ -85,6 +85,9 @@ struct sb_setrgbyc_arg {
     int rgbyc;
 };
 
+/** Debug output in TGE (not supported by RTE). */
+#define SB_SET_PRINTS_CALLBACK 15
+
 /*
  *  SIF DMA services
  */
@@ -608,6 +608,9 @@ struct sbr_cdvd_rcbyctl_arg {
     int stat;
 };
 
+/* Uses sbr_cdvd_read_arg */
+#define SBR_CDVD_READ_DVD		196
+
 /*
  * Remote Controller
  */
diff -urp linux-2.4.17_ps2.orig/include/asm-mips/ps2/sifdefs.h linux-2.4.17_ps2.fat_and_slim/include/asm-mips/ps2/sifdefs.h
--- linux-2.4.17_ps2.orig/include/asm-mips/ps2/sifdefs.h	2002-04-09 10:11:52.000000000 +0200
+++ linux-2.4.17_ps2.fat_and_slim/include/asm-mips/ps2/sifdefs.h	2009-08-14 16:19:12.000000000 +0200
@@ -114,6 +114,7 @@ typedef struct _sif_queue_data {
 /* calling error */
 #define SIF_RPCE_GETP	1	/* fail to get packet data */
 #define SIF_RPCE_SENDP	2	/* fail to send dma packet */
+#define E_SIF_PKT_ALLOC 0xd610	/* Can't allocate SIF packet. */
 
 /* functions */
 
diff -urp -x .depend linux-2.4.17_ps2/fs/Config.in linux-2.4.17_ps2.fat_and_slim/fs/Config.in
--- linux-2.4.17_ps2/fs/Config.in	2002-11-08 12:30:32.000000000 +0100
+++ linux-2.4.17_ps2.fat_and_slim/fs/Config.in	2009-12-15 23:47:07.000000000 +0100
@@ -107,6 +107,8 @@ if [ "$CONFIG_XFS_FS" != "n" ]; then
        define_bool CONFIG_HAVE_XFS_DMAPI y
     fi
 fi
+tristate 'PS2 filesystem support' CONFIG_PS2_FS
+tristate 'Union filesystem support' CONFIG_UNION_FS
 
 if [ "$CONFIG_NET" = "y" ]; then
 
diff -urp -x .depend linux-2.4.17_ps2/fs/Makefile linux-2.4.17_ps2.fat_and_slim/fs/Makefile
--- linux-2.4.17_ps2/fs/Makefile	2002-05-28 16:41:48.000000000 +0200
+++ linux-2.4.17_ps2.fat_and_slim/fs/Makefile	2009-12-15 23:45:13.000000000 +0100
@@ -68,6 +68,8 @@ subdir-$(CONFIG_SUN_OPENPROMFS)	+= openp
 
 subdir-$(CONFIG_XFS_DMAPI)	+= xfs_dmapi
 subdir-$(CONFIG_XFS_FS)		+= xfs
+subdir-$(CONFIG_PS2_FS)		+= ps2fs
+subdir-$(CONFIG_UNION_FS)		+= unionfs
 mod-subdirs			+= xfs
 # xfs_support is used by xfs and a couple of other SGI components.  Because CML1
 # does not correctly handle inter-menu dependencies, set CONFIG_XFS_SUPPORT
diff -rup linux-2.4.17_ps2.orig/drivers/ps2/cdvd.c linux-2.4.17_ps2.fat_and_slim/drivers/ps2/cdvd.c
--- linux-2.4.17_ps2.orig/drivers/ps2/cdvd.c	2003-04-03 09:33:14.000000000 +0200
+++ linux-2.4.17_ps2.fat_and_slim/drivers/ps2/cdvd.c	2010-01-12 15:18:28.000000000 +0100
@@ -45,6 +45,9 @@
 #define DISC_NODISC	1
 #define DISC_RETRY	2
 
+#define DVD_DATA_SECT_SIZE 2064
+#define DVD_DATA_OFFSET 12
+
 /*
  * data types
  */
@@ -288,9 +291,15 @@ ps2cdvd_check_cache(void)
 	DPRINT(DBG_READ, "REQ %p: sec=%ld  n=%ld  buf=%p\n",
 	       CURRENT, CURRENT->sector,
 	       CURRENT->current_nr_sectors, CURRENT->buffer);
-	memcpy(CURRENT->buffer,
-	       ps2cdvd.databuf + DATA_SECT_SIZE * (CURRENT->sector/4 - ps2cdvd.databuf_addr),
-	       DATA_SECT_SIZE);
+	if (ps2cdvd.disc_type == SCECdDVDV) {
+		memcpy(CURRENT->buffer,
+		       ps2cdvd.databuf + DVD_DATA_OFFSET + DVD_DATA_SECT_SIZE * (CURRENT->sector/4 - ps2cdvd.databuf_addr),
+		       DATA_SECT_SIZE);
+	} else {
+		memcpy(CURRENT->buffer,
+		       ps2cdvd.databuf + DATA_SECT_SIZE * (CURRENT->sector/4 - ps2cdvd.databuf_addr),
+		       DATA_SECT_SIZE);
+	}
 	spin_lock_irqsave(&io_request_lock, flags);
 	end_request(1);
 	spin_unlock_irqrestore(&io_request_lock, flags);
@@ -452,9 +461,16 @@ ps2cdvd_thread(void *arg)
 	       sn * 4, ps2cdvd_databuf_size, ps2cdvd.databuf,
 	       nsects != ps2cdvd_databuf_size ? "(retry)" : "");
 	ps2cdvd.databuf_nsects = 0;
-	if (ps2cdvdcall_read(sn, nsects, ps2cdvd.databuf,
-			     &ps2cdvd.data_mode) != 0) {
-	    NEW_STATE(STAT_CHECK_DISC);
+	if (ps2cdvd.disc_type == SCECdDVDV) {
+		if (ps2cdvdcall_read_dvd(sn, nsects, ps2cdvd.databuf,
+				     &ps2cdvd.data_mode) != 0) {
+		    NEW_STATE(STAT_CHECK_DISC);
+		}
+	} else {
+		if (ps2cdvdcall_read(sn, nsects, ps2cdvd.databuf,
+				     &ps2cdvd.data_mode) != 0) {
+		    NEW_STATE(STAT_CHECK_DISC);
+		}
 	}
 	res = ps2cdvdcall_geterror();
 	if (res == SCECdErNO) {
@@ -684,12 +700,22 @@ checkdisc()
      *  read label
      */
     if (read_label) {
-	if (ps2cdvdcall_read(16, 1, ps2cdvd.labelbuf, &ps2cdvd.label_mode)!=0||
-	    ps2cdvdcall_geterror() != SCECdErNO) {
-	    DPRINT(DBG_DIAG, "read() failed\n");
-	    res = DISC_ERROR;
-	    goto error_out;
+	if (ps2cdvd.disc_type == SCECdDVDV) {
+		if (ps2cdvdcall_read_dvd(16, 1, ps2cdvd.labelbuf, &ps2cdvd.label_mode)!=0||
+		    ps2cdvdcall_geterror() != SCECdErNO) {
+		    DPRINT(DBG_DIAG, "read() failed\n");
+		    res = DISC_ERROR;
+		    goto error_out;
+		}
+	} else {
+		if (ps2cdvdcall_read(16, 1, ps2cdvd.labelbuf, &ps2cdvd.label_mode)!=0||
+		    ps2cdvdcall_geterror() != SCECdErNO) {
+		    DPRINT(DBG_DIAG, "read() failed\n");
+		    res = DISC_ERROR;
+		    goto error_out;
+		}
 	}
+	memcpy(ps2cdvd.labelbuf, ps2cdvd.labelbuf + DVD_DATA_OFFSET, DATA_SECT_SIZE);
 	ps2cdvd.label_valid = 1;
 	DPRINT(DBG_DLOCK, "label is valid\n");
 #ifdef PS2CDVD_DEBUG
@@ -752,7 +778,6 @@ spindown(void)
     case SCECdPSCDDA:		/* PS CD DA */
     case SCECdPSCD:		/* PS CD */
     case SCECdPS2DVD:		/* PS2 DVD */
-    case SCECdDVDV:		/* DVD video */
     case SCECdIllgalMedia:	/* illegal media */
     case SCECdUNKNOWN:		/* unknown */
 	DPRINT(DBG_INFO, "spindown: data\n");
@@ -763,6 +788,15 @@ spindown(void)
 	ps2cdvd_invalidate_discinfo();
 	break;
 
+    case SCECdDVDV:		/* DVD video */
+	DPRINT(DBG_INFO, "spindown: data\n");
+	mode = ps2cdvd.data_mode;
+	mode.spindlctrl = SCECdSpinX2;
+	if (ps2cdvdcall_read_dvd(16, 1, ps2cdvd.databuf, &mode) != 0)
+	    DPRINT(DBG_DIAG, "spindown: data failed\n");
+	ps2cdvd_invalidate_discinfo();
+	break;
+
     case SCECdCDDA:		/* CD DA */
 	DPRINT(DBG_INFO, "spindown: CD-DA\n");
 	mode = ps2cdvd.cdda_mode;
@@ -860,7 +894,7 @@ int __init ps2cdvd_init(void)
 	 * allocate buffer
 	 */
 	DPRINT(DBG_VERBOSE, "init: allocate diaklabel buffer\n");
-	ps2cdvd.labelbuf = kmalloc(2048, GFP_KERNEL);
+	ps2cdvd.labelbuf = kmalloc(DVD_DATA_SECT_SIZE, GFP_KERNEL);
 	if (ps2cdvd.labelbuf == NULL) {
 		printk(KERN_ERR "ps2cdvd: Can't allocate buffer\n");
 		ps2cdvd_cleanup();
diff -rup linux-2.4.17_ps2.orig/include/asm-mips/ps2/cdvdcall.h linux-2.4.17_ps2.fat_and_slim/include/asm-mips/ps2/cdvdcall.h
--- linux-2.4.17_ps2.orig/include/asm-mips/ps2/cdvdcall.h	2009-08-14 16:19:43.000000000 +0200
+++ linux-2.4.17_ps2.fat_and_slim/include/asm-mips/ps2/cdvdcall.h	2010-01-12 15:12:15.000000000 +0100
@@ -216,3 +216,20 @@ static __inline__ int ps2cdvdcall_rcbyct
 
 	return (res);
 }
+
+static __inline__ int ps2cdvdcall_read_dvd(u_int lbn, u_int sectors, void *buf,
+				       struct sceCdRMode *rmode)
+{
+	struct sbr_cdvd_read_arg arg;
+	int res;
+
+	arg.lbn = lbn;
+	arg.sectors = sectors;
+	arg.buf = buf;
+	arg.rmode = rmode;
+
+	if (sbios_rpc(SBR_CDVD_READ_DVD, &arg, &res) < 0)
+		return (-1);
+
+	return (res);
+}
diff -urp linux-2.4.17_ps2.orig/arch/mips/ps2/powerbutton.c linux-2.4.17_ps2/arch/mips/ps2/powerbutton.c
--- linux-2.4.17_ps2.orig/arch/mips/ps2/powerbutton.c	2002-04-09 10:11:52.000000000 +0200
+++ linux-2.4.17_ps2/arch/mips/ps2/powerbutton.c	2010-08-24 16:25:35.000000000 +0200
@@ -14,33 +14,50 @@
 #include <linux/kernel.h>
 #include <linux/config.h>
 #include <linux/spinlock.h>
+#include <linux/sched.h>
+
 #include <asm/signal.h>
 #include <asm/ps2/sifdefs.h>
 #include <asm/ps2/sbcall.h>
+#include <asm/ps2/powerbutton.h>
+
 #include "ps2.h"
 
+#define POWEROFF_SID 0x9090900
+
+#define PWRBTN_MODE_SHUTDOWN             0x01
+#define PWRBTN_MODE_ENABLE_AUTO_SHUTOFF  0x02
+
+static ps2sif_clientdata_t cd_poweroff_rpc;
+static int rpc_initialized;
+static struct semaphore poweroff_rpc_sema;
+
 static void powerbutton_handler(void *);
 
-int __init ps2_powerbutton_init(void)
+static void poweroff_rpcend_notify(void *arg)
+{
+	complete((struct completion *)arg);
+	return;
+}
+
+/* Install powerhook with RTE (module CDVDFSV).
+ * This will not work with TGE.
+ */
+static int __init rte_powerhook(void)
 {
 	int res;
 	struct sb_cdvd_powerhook_arg arg;
 
-#ifdef CONFIG_PS2_SBIOS_VER_CHECK
-	if (sbios(SB_GETVER, NULL) < 0x0201)
-	    	return (-1);
-#endif
-
 	/*
 	 * XXX, you should get the CD/DVD lock.
 	 * But it might be OK because this routine will be called
-	 * in early stage of boot sequece.
+	 * in early stage of boot sequence.
 	 */
 
 	/* initialize CD/DVD */
 	do {
 		if (sbios_rpc(SBR_CDVD_INIT, NULL, &res) < 0)
-			return (-1);
+			return -1;
 	} while (res == -1);
 
 	/* install power button hook */
@@ -48,7 +65,94 @@ int __init ps2_powerbutton_init(void)
 	arg.arg = NULL;
 	sbios(SB_CDVD_POWERHOOK, &arg);
 
-	return (0);
+	return 0;
+}
+
+/* Install powerhook with TGE (module poweroff.irx).
+ * This will not work with RTE.
+ */
+static int __init tge_powerhook(void)
+{
+	int loop;
+	struct completion compl;
+	int rv;
+	volatile int j;
+
+	init_MUTEX(&poweroff_rpc_sema);
+
+	init_completion(&compl);
+
+	/* bind poweroff.irx module */
+	for (loop = 100; loop; loop--) {
+		rv = ps2sif_bindrpc(&cd_poweroff_rpc, POWEROFF_SID,
+			SIF_RPCM_NOWAIT, poweroff_rpcend_notify, (void *)&compl);
+		if (rv < 0) {
+			printk("poweroff.irx: bind rv = %d.\n", rv);
+			break;
+		}
+		wait_for_completion(&compl);
+		if (cd_poweroff_rpc.serve != 0)
+			break;
+		j = 0x010000;
+		while (j--) ;
+	}
+	if (cd_poweroff_rpc.serve == 0) {
+		printk("poweroff.irx bind error 1, power button will not work.\n");
+		return -1;
+	}
+	rpc_initialized = -1;
+	return 0;
+}
+
+int ps2_powerbutton_enable_auto_shutoff(int enable_auto_shutoff)
+{
+	struct completion compl;
+	int rv;
+
+	if (!rpc_initialized) {
+		return -1;
+	}
+
+	init_completion(&compl);
+	down(&poweroff_rpc_sema);
+	do {
+		rv = ps2sif_callrpc(&cd_poweroff_rpc, PWRBTN_MODE_ENABLE_AUTO_SHUTOFF,
+			SIF_RPCM_NOWAIT,
+			NULL, 0,
+			&enable_auto_shutoff, sizeof(enable_auto_shutoff),
+			(ps2sif_endfunc_t) poweroff_rpcend_notify,
+			(void *)&compl);
+	} while (rv == -E_SIF_PKT_ALLOC);
+	if (rv != 0) {
+		printk("ps2_powerbutton_enable_auto_shutoff callrpc failed, (%d)\n", rv);
+	} else {
+		wait_for_completion(&compl);
+	}
+	up(&poweroff_rpc_sema);
+	return rv;
+}
+
+
+int __init ps2_powerbutton_init(void)
+{
+	int rte_rv;
+	int tge_rv;
+
+	rpc_initialized = 0;
+
+#ifdef CONFIG_PS2_SBIOS_VER_CHECK
+	if (sbios(SB_GETVER, NULL) < 0x0201)
+	    	return (-1);
+#endif
+
+	rte_rv = rte_powerhook();
+	tge_rv = tge_powerhook();
+
+	if ((rte_rv == 0) || (tge_rv ==0)) {
+		return 0;
+	} else {
+		return -1;
+	}
 }
 
 static void powerbutton_handler(void *arg)
diff -urp linux-2.4.17_ps2.orig/init/main.c linux-2.4.17_ps2/init/main.c
--- linux-2.4.17_ps2.orig/init/main.c	2003-02-27 09:43:25.000000000 +0100
+++ linux-2.4.17_ps2/init/main.c	2010-08-24 16:13:44.000000000 +0200
@@ -61,6 +61,10 @@
 #include <linux/isapnp.h>
 #endif
 
+#ifdef CONFIG_PS2
+#include <asm/ps2/powerbutton.h>
+#endif
+
 #ifdef CONFIG_IRDA
 extern int irda_proto_init(void);
 extern int irda_device_init(void);
@@ -824,6 +828,11 @@ static void prepare_namespace(void)
 	real_root_dev = ROOT_DEV;
 #endif
 
+#ifdef CONFIG_PS2
+	/* Disable auto shutdown, because file system could be damged. */
+	ps2_powerbutton_enable_auto_shutoff(0);
+#endif
+
 #ifdef CONFIG_BLK_DEV_RAM
 #ifdef CONFIG_BLK_DEV_INITRD
 	if (mount_initrd)
diff -urp linux-2.4.17_ps2.orig/kernel/panic.c linux-2.4.17_ps2/kernel/panic.c
--- linux-2.4.17_ps2.orig/kernel/panic.c	2002-03-04 11:32:30.000000000 +0100
+++ linux-2.4.17_ps2/kernel/panic.c	2010-08-24 16:39:53.000000000 +0200
@@ -16,6 +16,10 @@
 #include <linux/init.h>
 #include <linux/sysrq.h>
 #include <linux/interrupt.h>
+#ifdef CONFIG_PS2
+#include <asm/ps2/powerbutton.h>
+#endif
+
 
 asmlinkage void sys_sync(void);	/* it's really int */
 
@@ -58,8 +62,13 @@ NORET_TYPE void panic(const char * fmt, 
 		printk(KERN_EMERG "In interrupt handler - not syncing\n");
 	else if (!current->pid)
 		printk(KERN_EMERG "In idle task - not syncing\n");
-	else
+	else {
 		sys_sync();
+#ifdef CONFIG_PS2
+		/* Enable power button, because init will not handle any signals. */
+		ps2_powerbutton_enable_auto_shutoff(-1);
+#endif
+	}
 	bust_spinlocks(0);
 
 #ifdef CONFIG_SMP
diff -Nurp linux-2.4.17_ps2/include/asm-mips/ps2/powerbutton.h linux-2.4.17_ps2-base/include/asm-mips/ps2/powerbutton.h
--- linux-2.4.17_ps2/include/asm-mips/ps2/powerbutton.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.4.17_ps2-base/include/asm-mips/ps2/powerbutton.h	2010-08-24 16:02:41.000000000 +0200
@@ -0,0 +1,6 @@
+#ifndef __ASM_PS2_POWERBTN_H
+#define __ASM_PS2_POWERBTN_H
+
+int ps2_powerbutton_enable_auto_shutoff(int enable_auto_shutoff);
+
+#endif
--- linux-2.4.17_ps2/drivers/ps2/cdvd.c	2011-09-18 23:07:50.883706993 +0200
+++ linux-2.4.17_ps2/drivers/ps2/cdvd.c	2011-09-18 23:09:04.363706989 +0200
@@ -745,6 +745,7 @@ checkdisc()
 #endif
     }
 
+#if 0 /* TBD: This seems not to be needed and may lead to hang at startup (no RPC response). */
     /*
      *  check tray count
      */
@@ -758,6 +759,7 @@ checkdisc()
 	res = DISC_RETRY;
 	goto error_out;
     }
+#endif
 
     return (DISC_OK);
 
